

                        else if( declaration.parent.specifiers ){ 
                            let requireModulePath = undefined;
                            let exportSpecifierList = [];
                            if(declaration.parent.source){
                                requireModulePath = declaration.parent.source.value;
                                console.log(requireModulePath)
                                if(requireModulePath){
                                    var uniqId = 'e' + makeId(8);
                                    if(prepare.WithFrom && typeof prepare.WithFrom === "function"){ 
                                        if(declaration.parent.specifiers && declaration.parent.specifiers.map){
                                            for (const iterator of declaration.parent.specifiers) {
                                                var name = ( iterator.exported ? iterator.exported.name : { exported : {}} ) || iterator.local.name ;
                                                var asName = iterator.local.name;
                                                exportSpecifierList.push({
                                                    name : t.identifier(name == asName ? name : asName ),
                                                });
                                            } 
                                        }
                                        prepareResult = prepare.WithFrom.call(nodePath,requireModulePath,exportSpecifierList);
                                        if(ezitoTypes.object(prepareResult)){
                                            var { cardsList , newModulePath , functionName } = prepareResult ;
                                            cardsList = cardsList || exportSpecifierList ;
                                            newModulePath = newModulePath || requireModulePath;
                                            functionName = functionNameCreator(functionName ? ezitoTypes.array(functionName) ? functionName : [ functionName ] : 'requrie');
                                            
                                            getProgram(nodePath).unshiftContainer('body',template(`var ${uniqId} = ${functionName[0]}`)({
                                                [functionName[1]] : t.stringLiteral(newModulePath)
                                            }));
                                            
                                            for (const iterator of cardsList) { 
                                                nodePath.insertBefore(template(`module.exports.NAME= ${uniqId}.NAME`)({
                                                    NAME : iterator.name
                                                }));
                                            } 
                                        } 
                                    } 
                                }else {  
                                    if(prepare.WithCards && typeof prepare.WithCards === "function"){  
                                        if(declaration.parent.specifiers && declaration.parent.specifiers.map){
                                            for (const iterator of declaration.parent.specifiers) {
                                                var name = ( iterator.exported ? iterator.exported.name : { exported : {}} ) || iterator.local.name ;
                                                var asName = iterator.local.name;
                                                exportSpecifierList.push({
                                                    name : t.identifier(name == asName ? name : asName ),
                                                });
                                            } 
                                        }
                                        prepareResult = prepare.WithCards.call(nodePath,exportSpecifierList);
                                        if(ezitoTypes.object(prepareResult)){ 
                                            for (const iterator of cardsList) { 
                                                nodePath.insertBefore(template(`module.exports.NAME =  NAME;`)({
                                                    NAME : iterator.name
                                                }));
                                            }
                                            nodePath.remove();
                                        } 
                                    } 
                                }
                                
                            }
                            const  list = declaration.parent.specifiers.map(function(item){
                                const name = ( item.exported ? item.exported.name : { exported : {}} ) || item.local.name ;
                                const as_name = item.local.name;
                                function templateCreator( type, requirePath ){
                                    switch (type) {
                                        case 'ExportSpecifier' :
                                            if(requirePath){
                                                return  template(
                                                    `Object.defineProperty( exports,"${name}",{
                                                        enumerable : true,
                                                        get : function(){
                                                            return require("${requirePath}").${as_name}
                                                        }
                                                    });` 
                                                )()
                                            }
                                            else {
                                                return  template(
                                                    `Object.defineProperty( exports,"${name}",{
                                                        enumerable:true,
                                                        get:function(){
                                                            return ${(as_name !== name ? as_name + '.': '') + name}
                                                        }
                                                    });`
                                                )()
                                            }
                                    }
                                }
    
                                return templateCreator(item.type , requireModulePath);
                            });
                            //nodePath.replaceWithMultiple(list);  
                        } 